[{"title":"CEP系列调研 — 目录","url":"/2019/04/28/cep-survey-catalogue/","content":"\n### Complex Event Processing\n\nCEP(Complex Event Processing)是一种根据给定pattern从数据流中识别特定的数据序列的一类技术。本系列文章旨在调研CEP的发展历程，并对最新的CEP系列技术做详细的了解。\n\n从功能上讲，可以将CEP分为CER(Complex Event Processing)以及Aggregation两个方面。其中，CER主要用于对特定序列的识别，Aggregation主要致力于提取识别序列的统计信息。在早期的系统中，Aggregation往往是基于CER的，但在最新的一些文章中，提出了一些不基于识别的online系统。\n\n从系统上分，CEP早期主要是单机非并行来处理。而随着大数据时代的到来，数据流逐渐向大规模高速的方向演化，产生了DCEP分支。CEP向分布式处理发展。\n\n另外，在某些领域，存在着对单个数据流同时进行多个Query的情况。因此，产生了模式share的一些研究来共享多Query识别的资源。\n\n### 文章列表\n\n下面是系列CEP文章目录，以下文章不完全按时间倒序排布：\n\n- Complete Event Trend Detection in High-Rate Event Streams<sup>[[1][]]</sup>\n\n  CET(Complete Event Trend)识别主要针对包含单个kleene模式的Query识别进行优化，采用了图模型的方式共享中间序列(partial sequence)存储，降低了存储冗余。同时，采用hybrid的识别方式从图中提取最终结果。\n\n- On complexity and optimization of expensive queries in complex event processing<sup>[[2][]]</sup>\n\t\n\t本文是[SASE系列](http://avid.cs.umass.edu/sase/index.php)的一个升级版，针对复杂Query进行分析找出低效的操作并将这个操作延后进行来提高系统的处理能力。\n\n- SASE+\n\n  - Efficient pattern matching over event streams<sup>[[3][]]</sup>\n  - SASE+: An Agile Language for Kleene Closure overEvent Streams<sup>[[4][]]</sup>\n\n  SASE+，提出了对Kleene模式的支持，提出了kleene匹配的改进NFA模型。这两篇文章一个是详细介绍了改进的NFA匹配模型。一个详细介绍了SASE+语言，特别是针对Kleene的匹配。\n\n- High-performance complex event processing over streams<sup>[[5][]]</sup>\n\n  SASE，提出了SASE语言来进行CEP，提出了NFA模型。\n\n- TelegraphCQ: Continuous Dataflow Processing for an Uncertain World<sup>[[6][]]</sup>\n\n  加州大学伯克利分校推出的一个系统，主要解决的问题是:\n\n  - 在数据流中做query而不是数据库\n  - 持续query: window,slide\n  - query之间的share以提高系统效率\n\n- Efficient Filtering of Composite Events<sup>[[7][]]</sup>\n\t\n\t在ENS(Event Notification Services)系统中，识别与(同时发生)、或(至少一个发生)、非(一段时间不发生)以及简单序列\n\n- Temporal Management of RFID Data<sup>[[8][]]</sup>\n\n\t一个RFID中间件，主要是基于关系型数据库来做的，将query转化为对应的数据库操作。\n\n- Real Time Event Based Analysis of Complex Systems<sup>[[9][]]</sup>\n\n- Complex Event Processing in Distributed Systems<sup>[[10][]]</sup>\n\n- Managing Event Processing Networks<sup>[[11][]]</sup>\n\n  对CEP的概念和应用做了较为详细的说明\n\n------\n\n- Cayuga\n  - Cayuga: A General Purpose Event Monitoring System<sup>[[12][]]</sup>\n  - Towards Expressive Publish/Subscribe Systems<sup>[[13][]]</sup>\n  \n  这两篇文章介绍了Cayuga，9主要针对Cayuga系统的设计及实现，10介绍了基于Cayuga的Pub/Sub系统\n\n- ZStream: A Cost-based Query Processor for Adaptively Detecting Composite Events<sup>[[14][]]</sup>\n\n- E-Cube: multi-dimensional event sequence analysis using hierarchical pattern query sharing<sup>[[15][]]</sup>\n\n- Complex event analytics: online aggregation of stream sequence patterns<sup>[[16][]]</sup>\n\n- High-performance complex event processing over XML streams<sup>[[17][]]</sup>\n\n***\n- Complex Event Recognition in the Big Data Era<sup>[[18][]]</sup>\n\n[1]:https://dl.acm.org/citation.cfm?id=3035947\n[2]:https://dl.acm.org/citation.cfm?id=2593671\n[3]:https://dl.acm.org/citation.cfm?doid=1376616.1376634\n[4]:http://avid.cs.umass.edu/sase/uploads/pubs/07-03.pdf\n[5]: https://dl.acm.org/citation.cfm?doid=1142473.1142520\n[6]: http://www-db.cs.wisc.edu/cidr/cidr2003/program/p24.pdf\n[7]:https://link.springer.com/chapter/10.1007%2F3-540-45073-4_17\n[8]: http://www.vldb.org/archives/website/2005/program/paper/wed/p1128-wang.pdf\n[9]:http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.35.7689&amp;rep=rep1&amp;type=pdf\n[10]:https://www.unix.com/pdf/CEP_in_distributed_systems.pdf\n[11]:http://infolab.stanford.edu/pub/cstr/reports/csl/tr/99/788/CSL-TR-99-788.pdf\n[12]:http://cidrdb.org/cidr2007/papers/cidr07p47.pdf\n[13]:https://link.springer.com/content/pdf/10.1007%2F11687238_38.pdf\n[14]:https://dl.acm.org/citation.cfm?doid=1559845.1559867\n[15]:https://dl.acm.org/citation.cfm?doid=1989323.1989416\n[16]:https://dl.acm.org/citation.cfm?doid=2588555.2593684\n[17]:https://dl.acm.org/citation.cfm?doid=2213836.2213866\n[18]: http://www.vldb.org/pvldb/vol10/p1996-giatrakos.pdf","tags":["CEP"],"categories":["CEP"]},{"title":"Hexo开发 — apollo主题Tag开发","url":"/2019/04/26/apollo-theme-edit/","content":"\n[apollo](https://github.com/pinggod/hexo-theme-apollo)是一个简洁美观的主题，该主题已不再更新。实际使用过程中发现该主题缺少对标签和分类的支持，因此fork了一下这个项目，准备自己开发标签和分类页面支持。\n\n# Hexo主题开发\n\nHexo的主题创建时非常简单的，只需要在theme文件夹内创建一个新的文件夹，文件夹的内容一般至少包含这几个文件或文件夹\n\n```\n├── _config.yml      //主题的配置文件\n├── languages\t\t\t\t//语言文件夹\n├── layout\t\t\t\t\t//页面模板文件夹\n├── scripts\t\t\t\t\t//脚本文件夹\n└── source\t\t\t\t\t//资源文件夹\n```\n\n#### _config.yml\n\n配置文件，所有配置会存储在全局变量theme中\n\n#### languages\n\n定义国际化相关的语言文件夹\n\n#### layout\n\n布局文件夹，页面的主题模板在这里定义。默认支持swig模板引擎，可以通过插件支持EJS、Hami或者Jade支持\n\n#### scripts\n\n脚本文件夹。定义用于页面的插件，如果该插件不需要发布到npm上，可以直接在scripts文件夹中定义\n\n#### source\n\n资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 `_`（下划线线）或隐藏的文件会被忽略。\n\n如果文件可以被渲染的话，会经过解析然后储存到 `public` 文件夹，否则会直接拷贝到 `public` 文件夹。\n\n\n\n# apollo标签支持\n\n根据上面的介绍可以发现如果需要增加页面模板，需要在layout文件夹内编写模板文件，然后将新的页面的layout定义为该模板。\n\n查看apollo的layout文件目录\n\n```\nlayout\n├── archive.jade\n├── index.jade\n├── mixins\n│   ├── paginator.jade\n│   └── post.jade\n├── partial\n│   ├── comment.jade\n│   ├── copyright.jade\n│   ├── head.jade\n│   ├── layout.jade\n│   ├── nav.jade\n│   └── scripts.jade\n└── post.jade\n```\n\n可以发现这里使用了jade模板引擎，jade的语法较为简单，参考[jade官网](http://jade-lang.com/)文档基本可以完成简单的网页模板设计。\n\n我们可以发现这里确实tag页面和category页面的模板。新建```tag.jade```和```category.jade```文件。为了在博客列表已经博客页面共用tag的模板，在mixins文件夹下创建```tags.jade```文件夹。","tags":["Hexo","apollo"]},{"title":"Jupyter常用配置","url":"/2019/04/19/jupyter/","content":"\n主要记录一下Jupyter notebook的一些配置，方便以后查阅。\n\n## 安装\n\n```bash\n$ pip install jupyter\n```\n\n## 配置\n\n#### 生成配置文件\n\n```bash\n$ jupyter notebook --generate-config\n```\n\n#### 设置密码\n\n```bash\n$ jupyter notebook password\nEnter password:\nVerify password:\n```\n\n如果这里显示\n\n```bash\nFileNotFoundError: [Errno 2] No such file or directory: 'home/xxx/.jupyter/jupyter_notebook_config.json'\n```\n\n手动在根目录新建文件夹\n\n```bash\n$ mkdir ~/.jupyter\n```\n\n在默认配置文件~/.jupyter/jupyter_nodebook_config.py中输入\n\n```python\nc.NotebookApp.password = 'sha1:...'\n```\n\n密文为刚刚生成的密文，在jupyter_notebook_config.json中\n\n#### 远端访问\n\n  打开默认配置文件~/.jupyter/jupyter_nodebook_config.py\n\n  ```python\nc.NotebookApp.ip = '0.0.0.0' // 所有ip均可访问,注意网上说这里可以用*，但是我实测发现*会报错\nc.NotebookApp.open_browser = False //禁止自动打开文件夹\nc.NotebookApp.port = 15000\n  ```\n\n#### 使用matplotlib\n\n  ```python\nimport matplotlib.pyplot as plt\n%matplotlib inline\n  ```\n\n#### 自动补全\n使用jupyter_contrib_nbextensions\n\n  ```bash\n$ pip install jupyter_contrib_nbextensions\n$ jupyter contrib nbextension install --user\n$ pip install jupyter_nbextensions_configurator\n$ jupyter nbextensions_configurator enable --user\n  ```\n\n然后重启jupyter，在出现的Nbextensions菜单下勾选Hinterland插件\n\n不定时更新。。。","tags":["Jupyter"]},{"title":"初识hexo","url":"/2019/04/18/hexo-plugin/","content":"\n一直想写博客，但是个人比较懒，今天终于下定决心用hexo搭了一个博客网站。选hexo的主要原因是我喜欢用markdown，然后我的服务器也差不多到期了，用hexo可以挂在github上比较方便。\n\n#### 搭建\n\n基于hexo搭建博客网站比较简单。这里主要参考了[使用hexo+github搭建免费个人博客详细教程](https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html)。文章写得很详细，我这里就不多说了。主要说下遇到的几个问题。\n\n#### github pages配置\n\n首先碰到的问题是搭建完成后访问我的github page出现404错误。这里主要的问题是GitHub仓库名出错了，必须是<github用户名>.github.io。改名后就可以正常访问了。\n\n在解决这个问题过程中还发现了github仓库setttings下面有一个github pages配置，可以切换显示的branch和主题。\n\n#### 图标问题\n\n我是用的主题是[apollo](https://github.com/pinggod/hexo-theme-apollo)，这个主题比较清爽。不过搭建之后发现它有一个很丑的默认图标，这个肯定是不能忍的了。由于hexo以及这个主题文档都没有提及图标修改，所以搞了半天。\n\n最开始的办法是找到这个主题的文件夹theme/apollo，发现它的source目录下有一个favicon.png和默认图标是一样的，于是我就将我的图标复制替换了这个默认图标，果然页面的图标修改成功了。不过一直感觉这样做肯定不是一个正确的做法，毕竟这样设计太合理了。所以就去看了一下这个主题的源码，我在theme/apollo/layout文件夹下发现了一堆jade结尾的文件，这些都是jade模板引擎的文件。不过我都看不懂|(*′口`)。不过大概看了一下，发现有几个文件里面写着\n\n```jade\nlink(rel=\"icon\", href=url_for(theme.favicon))\n```\n\n```jade\na.logo-link(href=url_for())\n  img(src=url_for(theme.logo) alt=\"logo\")\n```\n\n大致猜了一下这里就是指向图标的位置。这里发现了一个theme变量，于是去查文档(不得不说hexo的文档真的不是初学者看得懂的)，只看到了一个theme变量的介绍是继承自网站配置，但是根目录下的\\_config.yml文件中的theme明显不可能包含变量，但是完全不知道在哪定义的。直到我偶然发现主题文件夹下面有一个_config.yml的文件，里面有一个\n\n```yaml\nfavicon: favicon.png\nlogo: favicon.png\n```\n\n所以很明显，定义的位置在这里。改为自定义的路径即可。\n\n\n\nhexo整体的搭建还是挺简单的，网上教程也比较多，但是官方文档是真的难看懂。另外一个问题是github访问好慢。。。后面准备把图片之类的上传到七牛云上去了，准备写一个插件打包的时候自动上传并修改url。","tags":["Hexo","博客"]},{"title":"SASE","url":"/2019/04/18/SASE/","tags":["CEP"]}]